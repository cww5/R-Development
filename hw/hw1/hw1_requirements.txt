Connor Watson
9/22/18

For the following questions, please use R commands to find solutions when applicable. Please provide the commands you use and the values (solution) returned by R.

1.20 The built-in data set islands contains the size of the world’s land masses that exceed 10,000 square miles. Use sort() with the argument decreasing=TRUE to find the seven largest land masses.
For Example, the expected solution is
> sort(islands, decreasing=TRUE)[1:7]
         Asia        Africa North America South America    Antarctica        Europe     Australia 
        16988         11506          9390          6795          5500          3745          2968

1.21 Load the data set primes (UsingR). This is the set of prime numbers in [1,2003]. How many are there? How many in the range [1,100]? [100,1000]?
> data(primes)
> length(primes) #There are 304 prime numbers total
[1] 304
> length(primes[primes>1 & primes<100])
[1] 25
> #There are 25 prime numbers in the range 1:100
> length(primes[primes>100 & primes<1000])
[1] 143
> #There are 143 prime numbers in the range 100:1000

1.22 Load the data set primes (UsingR). We wish to find all the twin primes. These are numbers p and p+2, where both are prime.
1. Explain what primes[-1] returns.
> #This returns the entire list of prime numbers EXCEPT the 2 at location 1
> #Negative index omits that value
> primes[-1]
  [1]    3    5    7   11   13   17   19   23   29   31   37   41   43   47   53   59   61   67   71   73
 [21]   79   83   89   97  101  103  107  109  113  127  131  137  139  149  151  157  163  167  173  179
 [41]  181  191  193  197  199  211  223  227  229  233  239  241  251  257  263  269  271  277  281  283
 [61]  293  307  311  313  317  331  337  347  349  353  359  367  373  379  383  389  397  401  409  419
 [81]  421  431  433  439  443  449  457  461  463  467  479  487  491  499  503  509  521  523  541  547
[101]  557  563  569  571  577  587  593  599  601  607  613  617  619  631  641  643  647  653  659  661
[121]  673  677  683  691  701  709  719  727  733  739  743  751  757  761  769  773  787  797  809  811
[141]  821  823  827  829  839  853  857  859  863  877  881  883  887  907  911  919  929  937  941  947
[161]  953  967  971  977  983  991  997 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069 1087
[181] 1091 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193 1201 1213 1217 1223 1229
[201] 1231 1237 1249 1259 1277 1279 1283 1289 1291 1297 1301 1303 1307 1319 1321 1327 1361 1367 1373 1381
[221] 1399 1409 1423 1427 1429 1433 1439 1447 1451 1453 1459 1471 1481 1483 1487 1489 1493 1499 1511 1523
[241] 1531 1543 1549 1553 1559 1567 1571 1579 1583 1597 1601 1607 1609 1613 1619 1621 1627 1637 1657 1663
[261] 1667 1669 1693 1697 1699 1709 1721 1723 1733 1741 1747 1753 1759 1777 1783 1787 1789 1801 1811 1823
[281] 1831 1847 1861 1867 1871 1873 1877 1879 1889 1901 1907 1913 1931 1933 1949 1951 1973 1979 1987 1993
[301] 1997 1999 2003

2. If you set n=length (primes), explain what primes[-n] returns.
> #This returns the entire list of prime numbers EXCEPT the 2003 at location 304 #because 304 is the length of primes. Negative index omits that value.
> n = length(primes)
> primes[-n]
  [1]    2    3    5    7   11   13   17   19   23   29   31   37   41   43   47   53   59   61   67   71
 [21]   73   79   83   89   97  101  103  107  109  113  127  131  137  139  149  151  157  163  167  173
 [41]  179  181  191  193  197  199  211  223  227  229  233  239  241  251  257  263  269  271  277  281
 [61]  283  293  307  311  313  317  331  337  347  349  353  359  367  373  379  383  389  397  401  409
 [81]  419  421  431  433  439  443  449  457  461  463  467  479  487  491  499  503  509  521  523  541
[101]  547  557  563  569  571  577  587  593  599  601  607  613  617  619  631  641  643  647  653  659
[121]  661  673  677  683  691  701  709  719  727  733  739  743  751  757  761  769  773  787  797  809
[141]  811  821  823  827  829  839  853  857  859  863  877  881  883  887  907  911  919  929  937  941
[161]  947  953  967  971  977  983  991  997 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069
[181] 1087 1091 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193 1201 1213 1217 1223
[201] 1229 1231 1237 1249 1259 1277 1279 1283 1289 1291 1297 1301 1303 1307 1319 1321 1327 1361 1367 1373
[221] 1381 1399 1409 1423 1427 1429 1433 1439 1447 1451 1453 1459 1471 1481 1483 1487 1489 1493 1499 1511
[241] 1523 1531 1543 1549 1553 1559 1567 1571 1579 1583 1597 1601 1607 1609 1613 1619 1621 1627 1637 1657
[261] 1663 1667 1669 1693 1697 1699 1709 1721 1723 1733 1741 1747 1753 1759 1777 1783 1787 1789 1801 1811
[281] 1823 1831 1847 1861 1867 1871 1873 1877 1879 1889 1901 1907 1913 1931 1933 1949 1951 1973 1979 1987
[301] 1993 1997 1999

3. Why might primes [-1]—primes [-n] give clues as to what the twin primes are?
How many twin primes are there in the data set?
> differences <- primes[-1] - primes[-n]
> #This takes primes (without pos1) and primes (without posn) and takes the differences
> #between each vector. This gives a hint to twin primes because the difference from
> #one prime to the next should be 2.
> twin_primes = differences[differences==2]
> length(twin_primes) #61 twin primes
[1] 61

1.23 For the data set treering, which contains tree-ring widths in dimension-less units, use an R function to answer the following:
1. How many observations are there?
> #Exercise 1.23)
> data(treering)
> length(treering) #7980 observations
[1] 7980

2. Find the smallest observation.
> sorted_treering <- sort(treering)
> smallest_largest <- c(sorted_treering[[1]],sorted_treering[[7980]])
> #smallest = 0.000

3. Find the largest observation.
largest = 1.908

4. How many are bigger than 1.5?
> length(sorted_treering[sorted_treering > 1.5])
[1] 219
> #There are 219 values greater than 1.5

1.24 The data set mandms (UsingR) contains the targeted color distribution in a bag of M&Ms as percentages for varies types of packaging. Answer these questions.
1. Which packaging is missing one of the six colors?
> #Exercise 1.24)
> data("mandms")
> mandms
                  blue   brown   green  orange     red  yellow
milk chocolate 10.0000 30.0000 10.0000 10.0000 20.0000 20.0000
Peanut         20.0000 20.0000 10.0000 10.0000 20.0000 20.0000
Peanut Butter  20.0000 20.0000 20.0000  0.0000 20.0000 20.0000
Almond         16.6667 16.6667 16.6667 16.6667 16.6667 16.6667
kid minis      16.6667 16.6667 16.6667 16.6667 16.6667 16.6667
> #Peanut Butter is missing the orange color

2. Which types of packaging have an equal distribution of colors?
> #kid minis and Almond both have equal distribution of colors
> #16.667

3. Which packaging has a single color that is more likely than all the others? What color is this?
> #milk chocolate has brown color with 30 distribution 
> #greater than all the other colors

1.25 The time variable in the data set nym. 2002 (UsingR) contains the time to finish for several participants in the 2002 New York City Marathon. Answer these questions.
1. How many times are stored in the data set?
> #Exercise 1.25)
> data(nym.2002) 
> nrow(nym.2002)
[1] 1000
> #This returns the num rows in the data.frame which is 1000 rows
> time_column <- nym.2002[,"time"])
> length(!is.na(time_column) & time_column[time_column>0])
[1] 1000
> #This confirms the number of not NA times in the column, and non-negative
> #time values.
> #There are 1000 times in the column time

2. What was the fastest time in minutes? Convert this into hours and minutes using R.
> min(time_column)
[1] 147.3333
> #min (fastest) time is 147.3333 minutes
> 147.3333 / 60  #2 hours
[1] 2.455555
> .455555 * 60  #27.3333 minutes
[1] 27.3333

3. What was the slowest time in minutes? Convert this into hours and minutes using R.
> max(time_column)
[1] 566.7833
> #max (slowest) time is 566.7833 minutes
> 566.7833 / 60  #9 hours
[1] 9.446388
> 60 * .446388  #26.78328 minutes
[1] 26.78328

1.26 For the data set rivers, which is the longest river? The shortest?
> #Exercise 1.26)
> sorted_rivers <- sort(rivers)
> smallest_longest <- c(sorted_rivers[[1]], sorted_rivers[[length(sorted_rivers)]])
> #smallest is 135 and longest is 3710

1.27 The data set uspop contains decade-by-decade population figures for the United States from 1790 to 1970.
1. Use names() and seq() to add the year names to the data vector.
> #Exercise 1.27)
> data("uspop")
> names(uspop) <- seq(from = 1790, to=1970, by=10)
> uspop
Time Series:
Start = 1790 
End = 1970 
Frequency = 0.1 
  1790   1800   1810   1820   1830   1840   1850   1860   1870   1880   1890   1900   1910   1920   1930 
  3.93   5.31   7.24   9.64  12.90  17.10  23.20  31.40  39.80  50.20  62.90  76.00  92.00 105.70 122.80 
  1940   1950   1960   1970 
131.70 151.30 179.30 203.20


2. Use diff() to find the inter-decade differences. Which decade had the greatest increase?
> diffs <- diff(uspop,lag=1,differences=1)
> max(diffs) #28 is the maximum difference between decades
[1] 28

3. Explain why you could reasonably expect that the difference will always increase with each decade. Is this the case with the data?
#Generally speaking, the population should increase with each decade because there 
#are increasingly more people, and this reasonably means the differences in population
#should also be increasing over time. This is not always the case, for example from
#1930 to 1940, the population increase was much smaller because of World War 2, but
#from 1940 to 1950 it increased again because the war was ending.



